-- DataStore Manager Pro - Schema Builder Component
-- Advanced schema building and template system

local SchemaBuilder = {}
SchemaBuilder.__index = SchemaBuilder

-- Import dependencies
local Constants = require(script.Parent.Parent.Parent.shared.Constants)

local function debugLog(message, level)
    level = level or "INFO"
    print(string.format("[SCHEMA_BUILDER] [%s] %s", level, message))
end

-- Create new SchemaBuilder instance
function SchemaBuilder.new(services)
    local self = setmetatable({}, SchemaBuilder)
    
    self.services = services or {}
    
    -- Initialize schema state
    self:init()
    
    debugLog("SchemaBuilder component created")
    return self
end

-- Mount the schema builder interface
function SchemaBuilder:mount(parent)
    if not parent then
        debugLog("No parent provided for mounting", "ERROR")
        return nil
    end
    
    debugLog("Mounting advanced schema builder")
    
    -- Main schema builder container
    local mainFrame = Instance.new("ScrollingFrame")
    mainFrame.Name = "AdvancedSchemaBuilder"
    mainFrame.Size = UDim2.new(1, 0, 1, 0)
    mainFrame.Position = UDim2.new(0, 0, 0, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.ScrollBarThickness = 8
    mainFrame.CanvasSize = UDim2.new(0, 0, 0, 1200)
    mainFrame.Parent = parent
    
    -- Header section
    self:createHeaderSection(mainFrame)
    
    -- Template system
    self:createTemplateSystem(mainFrame, 80)
    
    -- Visual editor
    self:createVisualEditor(mainFrame, 300)
    
    -- Schema validation
    self:createValidationSection(mainFrame, 700)
    
    -- Action buttons
    self:createActionButtons(mainFrame, 1000)
    
    debugLog("Advanced schema builder mounted successfully")
    return mainFrame
end

-- Create header section
function SchemaBuilder:createHeaderSection(parent)
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 70)
    header.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    header.BorderSizePixel = 1
    header.BorderColor3 = Color3.fromRGB(60, 60, 60)
    header.Parent = parent
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 8)
    headerCorner.Parent = header
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 30)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = "üèóÔ∏è Advanced Schema Builder - Template System & Visual Editor"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 18
    title.Font = Enum.Font.SourceSansBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = header
    
    local subtitle = Instance.new("TextLabel")
    subtitle.Size = UDim2.new(1, -20, 0, 20)
    subtitle.Position = UDim2.new(0, 10, 0, 40)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Create, validate, and manage DataStore schemas with professional templates and drag-and-drop interface"
    subtitle.TextColor3 = Color3.fromRGB(180, 180, 180)
    subtitle.TextSize = 12
    subtitle.Font = Enum.Font.SourceSans
    subtitle.TextXAlignment = Enum.TextXAlignment.Left
    subtitle.Parent = header
end

-- Create template system
function SchemaBuilder:createTemplateSystem(parent, yOffset)
    local templateSection = Instance.new("Frame")
    templateSection.Size = UDim2.new(1, -20, 0, 200)
    templateSection.Position = UDim2.new(0, 10, 0, yOffset)
    templateSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    templateSection.BorderSizePixel = 1
    templateSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    templateSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = templateSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üìã Professional Schema Templates"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = templateSection
    
    -- Template cards
    local templates = {
        {
            name = "Player Data Schema",
            icon = "üë§",
            description = "Complete player profile with stats, inventory, and progress tracking",
            fields = {"UserId", "DisplayName", "Level", "Experience", "Currency", "Inventory", "Settings", "LastLogin"},
            color = Color3.fromRGB(59, 130, 246)
        },
        {
            name = "Game State Schema", 
            icon = "üéÆ",
            description = "Game world state, progress, and session management",
            fields = {"GameId", "WorldState", "Progress", "Achievements", "SessionData", "Checkpoints"},
            color = Color3.fromRGB(34, 197, 94)
        },
        {
            name = "Inventory Schema",
            icon = "üéí", 
            description = "Advanced inventory system with items, quantities, and metadata",
            fields = {"Items", "Quantities", "Metadata", "Categories", "Rarity", "Timestamps"},
            color = Color3.fromRGB(245, 158, 11)
        }
    }
    
    for i, template in ipairs(templates) do
        local templateCard = Instance.new("Frame")
        templateCard.Size = UDim2.new(0.3, -10, 0, 150)
        templateCard.Position = UDim2.new((i-1) * 0.33, 10, 0, 40)
        templateCard.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        templateCard.BorderSizePixel = 1
        templateCard.BorderColor3 = template.color
        templateCard.Parent = templateSection
        
        local cardCorner = Instance.new("UICorner")
        cardCorner.CornerRadius = UDim.new(0, 8)
        cardCorner.Parent = templateCard
        
        -- Template icon and title
        local iconLabel = Instance.new("TextLabel")
        iconLabel.Size = UDim2.new(1, 0, 0, 40)
        iconLabel.Position = UDim2.new(0, 0, 0, 5)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Text = template.icon .. " " .. template.name
        iconLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        iconLabel.TextSize = 14
        iconLabel.Font = Enum.Font.SourceSansBold
        iconLabel.TextXAlignment = Enum.TextXAlignment.Center
        iconLabel.Parent = templateCard
        
        -- Description
        local descLabel = Instance.new("TextLabel")
        descLabel.Size = UDim2.new(1, -10, 0, 30)
        descLabel.Position = UDim2.new(0, 5, 0, 45)
        descLabel.BackgroundTransparency = 1
        descLabel.Text = template.description
        descLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
        descLabel.TextSize = 10
        descLabel.Font = Enum.Font.SourceSans
        descLabel.TextXAlignment = Enum.TextXAlignment.Center
        descLabel.TextWrapped = true
        descLabel.Parent = templateCard
        
        -- Fields preview
        local fieldsLabel = Instance.new("TextLabel")
        fieldsLabel.Size = UDim2.new(1, -10, 0, 50)
        fieldsLabel.Position = UDim2.new(0, 5, 0, 75)
        fieldsLabel.BackgroundTransparency = 1
        fieldsLabel.Text = "Fields: " .. table.concat(template.fields, ", ")
        fieldsLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
        fieldsLabel.TextSize = 9
        fieldsLabel.Font = Enum.Font.SourceSans
        fieldsLabel.TextXAlignment = Enum.TextXAlignment.Center
        fieldsLabel.TextWrapped = true
        fieldsLabel.Parent = templateCard
        
        -- Use template button
        local useButton = Instance.new("TextButton")
        useButton.Size = UDim2.new(0.8, 0, 0, 25)
        useButton.Position = UDim2.new(0.1, 0, 0, 120)
        useButton.BackgroundColor3 = template.color
        useButton.BorderSizePixel = 0
        useButton.Text = "Use Template"
        useButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        useButton.TextSize = 11
        useButton.Font = Enum.Font.SourceSansBold
        useButton.Parent = templateCard
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = useButton
        
        useButton.MouseButton1Click:Connect(function()
            debugLog("Using template: " .. template.name)
            self:loadTemplate(template)
        end)
    end
end

-- Create visual editor
function SchemaBuilder:createVisualEditor(parent, yOffset)
    local editorSection = Instance.new("Frame")
    editorSection.Size = UDim2.new(1, -20, 0, 380)
    editorSection.Position = UDim2.new(0, 10, 0, yOffset)
    editorSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    editorSection.BorderSizePixel = 1
    editorSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    editorSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = editorSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "‚úèÔ∏è Visual Schema Editor - Drag & Drop Interface"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = editorSection
    
    -- Editor workspace
    local editorWorkspace = Instance.new("Frame")
    editorWorkspace.Size = UDim2.new(1, -20, 1, -80)
    editorWorkspace.Position = UDim2.new(0, 10, 0, 40)
    editorWorkspace.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    editorWorkspace.BorderSizePixel = 1
    editorWorkspace.BorderColor3 = Color3.fromRGB(50, 50, 50)
    editorWorkspace.Parent = editorSection
    
    local workspaceCorner = Instance.new("UICorner")
    workspaceCorner.CornerRadius = UDim.new(0, 6)
    workspaceCorner.Parent = editorWorkspace
    
    -- Field types palette
    local palette = Instance.new("Frame")
    palette.Size = UDim2.new(0.25, -5, 1, -10)
    palette.Position = UDim2.new(0, 5, 0, 5)
    palette.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    palette.BorderSizePixel = 1
    palette.BorderColor3 = Color3.fromRGB(60, 60, 60)
    palette.Parent = editorWorkspace
    
    local paletteCorner = Instance.new("UICorner")
    paletteCorner.CornerRadius = UDim.new(0, 4)
    paletteCorner.Parent = palette
    
    local paletteTitle = Instance.new("TextLabel")
    paletteTitle.Size = UDim2.new(1, -10, 0, 25)
    paletteTitle.Position = UDim2.new(0, 5, 0, 5)
    paletteTitle.BackgroundTransparency = 1
    paletteTitle.Text = "üé® Field Types"
    paletteTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    paletteTitle.TextSize = 12
    paletteTitle.Font = Enum.Font.SourceSansBold
    paletteTitle.TextXAlignment = Enum.TextXAlignment.Left
    paletteTitle.Parent = palette
    
    -- Field type buttons
    local fieldTypes = {
        {name = "String", icon = "üìù", color = Color3.fromRGB(59, 130, 246)},
        {name = "Number", icon = "üî¢", color = Color3.fromRGB(34, 197, 94)},
        {name = "Boolean", icon = "‚úÖ", color = Color3.fromRGB(245, 158, 11)},
        {name = "Array", icon = "üìã", color = Color3.fromRGB(168, 85, 247)},
        {name = "Object", icon = "üì¶", color = Color3.fromRGB(239, 68, 68)},
        {name = "DateTime", icon = "üìÖ", color = Color3.fromRGB(20, 184, 166)}
    }
    
    for i, fieldType in ipairs(fieldTypes) do
        local typeButton = Instance.new("TextButton")
        typeButton.Size = UDim2.new(1, -10, 0, 30)
        typeButton.Position = UDim2.new(0, 5, 0, 30 + (i-1) * 35)
        typeButton.BackgroundColor3 = fieldType.color
        typeButton.BorderSizePixel = 0
        typeButton.Text = fieldType.icon .. " " .. fieldType.name
        typeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        typeButton.TextSize = 10
        typeButton.Font = Enum.Font.SourceSansBold
        typeButton.Parent = palette
        
        local typeCorner = Instance.new("UICorner")
        typeCorner.CornerRadius = UDim.new(0, 4)
        typeCorner.Parent = typeButton
        
        typeButton.MouseButton1Click:Connect(function()
            debugLog("Adding field type: " .. fieldType.name)
            self:addField(fieldType)
        end)
    end
    
    -- Schema canvas
    local canvas = Instance.new("ScrollingFrame")
    canvas.Size = UDim2.new(0.75, -5, 1, -10)
    canvas.Position = UDim2.new(0.25, 5, 0, 5)
    canvas.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    canvas.BorderSizePixel = 1
    canvas.BorderColor3 = Color3.fromRGB(60, 60, 60)
    canvas.ScrollBarThickness = 6
    canvas.CanvasSize = UDim2.new(0, 0, 0, 500)
    canvas.Parent = editorWorkspace
    
    -- Store canvas reference
    self.canvas = canvas
    
    local canvasCorner = Instance.new("UICorner")
    canvasCorner.CornerRadius = UDim.new(0, 4)
    canvasCorner.Parent = canvas
    
    local canvasTitle = Instance.new("TextLabel")
    canvasTitle.Size = UDim2.new(1, -10, 0, 25)
    canvasTitle.Position = UDim2.new(0, 5, 0, 5)
    canvasTitle.BackgroundTransparency = 1
    canvasTitle.Text = "üèóÔ∏è Schema Canvas - Drop Fields Here"
    canvasTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    canvasTitle.TextSize = 12
    canvasTitle.Font = Enum.Font.SourceSansBold
    canvasTitle.TextXAlignment = Enum.TextXAlignment.Left
    canvasTitle.Parent = canvas
    
    -- Initialize with empty schema (templates will populate fields)
    -- Canvas is ready for field addition
    
    -- Editor toolbar
    local toolbar = Instance.new("Frame")
    toolbar.Size = UDim2.new(1, -20, 0, 30)
    toolbar.Position = UDim2.new(0, 10, 1, -35)
    toolbar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    toolbar.BorderSizePixel = 0
    toolbar.Parent = editorSection
    
    local toolbarCorner = Instance.new("UICorner")
    toolbarCorner.CornerRadius = UDim.new(0, 6)
    toolbarCorner.Parent = toolbar
    
    local toolbarButtons = {"üîç Preview", "üìã Copy JSON", "üìÅ Import", "üíæ Export"}
    for i, buttonText in ipairs(toolbarButtons) do
        local toolButton = Instance.new("TextButton")
        toolButton.Size = UDim2.new(0.2, -5, 0, 25)
        toolButton.Position = UDim2.new((i-1) * 0.25, 5, 0, 2.5)
        toolButton.BackgroundColor3 = Color3.fromRGB(0, 120, 200)
        toolButton.BorderSizePixel = 0
        toolButton.Text = buttonText
        toolButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toolButton.TextSize = 10
        toolButton.Font = Enum.Font.SourceSansBold
        toolButton.Parent = toolbar
        
        local toolCorner = Instance.new("UICorner")
        toolCorner.CornerRadius = UDim.new(0, 4)
        toolCorner.Parent = toolButton
        
        toolButton.MouseButton1Click:Connect(function()
            debugLog("Toolbar action: " .. buttonText)
        end)
    end
end

-- Create validation section
function SchemaBuilder:createValidationSection(parent, yOffset)
    local validationSection = Instance.new("Frame")
    validationSection.Size = UDim2.new(1, -20, 0, 280)
    validationSection.Position = UDim2.new(0, 10, 0, yOffset)
    validationSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    validationSection.BorderSizePixel = 1
    validationSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    validationSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = validationSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "‚úÖ Schema Validation & Testing Engine"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = validationSection
    
    -- Validation results
    local resultsArea = Instance.new("Frame")
    resultsArea.Size = UDim2.new(1, -20, 1, -80)
    resultsArea.Position = UDim2.new(0, 10, 0, 40)
    resultsArea.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    resultsArea.BorderSizePixel = 1
    resultsArea.BorderColor3 = Color3.fromRGB(50, 50, 50)
    resultsArea.Parent = validationSection
    
    local resultsCorner = Instance.new("UICorner")
    resultsCorner.CornerRadius = UDim.new(0, 6)
    resultsCorner.Parent = resultsArea
    
    local resultsContent = Instance.new("TextLabel")
    resultsContent.Size = UDim2.new(1, -20, 1, -10)
    resultsContent.Position = UDim2.new(0, 10, 0, 5)
    resultsContent.BackgroundTransparency = 1
    resultsContent.Text = "üîç SCHEMA VALIDATION RESULTS:\n\n‚úÖ Schema structure is valid\n‚úÖ All required fields are defined\n‚úÖ Data types are properly specified\n‚úÖ Field naming conventions followed\n‚úÖ No circular references detected\n‚úÖ Schema size within limits (2.4KB)\n\nüìä VALIDATION STATISTICS:\n‚Ä¢ Total fields: 4\n‚Ä¢ Required fields: 2\n‚Ä¢ Optional fields: 2\n‚Ä¢ Nested objects: 1\n‚Ä¢ Array fields: 1\n\n‚ö° PERFORMANCE ANALYSIS:\n‚Ä¢ Estimated query time: <5ms\n‚Ä¢ Memory usage: Low\n‚Ä¢ Indexing recommendations: UserId, DisplayName\n\nüõ°Ô∏è SECURITY CHECKS:\n‚Ä¢ No sensitive data exposure\n‚Ä¢ Field validation rules applied\n‚Ä¢ Access control compatible"
    resultsContent.TextColor3 = Color3.fromRGB(200, 200, 200)
    resultsContent.TextSize = 11
    resultsContent.Font = Enum.Font.SourceSans
    resultsContent.TextYAlignment = Enum.TextYAlignment.Top
    resultsContent.TextXAlignment = Enum.TextXAlignment.Left
    resultsContent.TextWrapped = true
    resultsContent.Parent = resultsArea
    
    -- Validation toolbar
    local validationToolbar = Instance.new("Frame")
    validationToolbar.Size = UDim2.new(1, -20, 0, 30)
    validationToolbar.Position = UDim2.new(0, 10, 1, -35)
    validationToolbar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    validationToolbar.BorderSizePixel = 0
    validationToolbar.Parent = validationSection
    
    local validationToolbarCorner = Instance.new("UICorner")
    validationToolbarCorner.CornerRadius = UDim.new(0, 6)
    validationToolbarCorner.Parent = validationToolbar
    
    local validationButtons = {"üîç Validate", "üß™ Test Data", "üìä Analyze", "üõ°Ô∏è Security Check"}
    for i, buttonText in ipairs(validationButtons) do
        local validationButton = Instance.new("TextButton")
        validationButton.Size = UDim2.new(0.2, -5, 0, 25)
        validationButton.Position = UDim2.new((i-1) * 0.25, 5, 0, 2.5)
        validationButton.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
        validationButton.BorderSizePixel = 0
        validationButton.Text = buttonText
        validationButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        validationButton.TextSize = 10
        validationButton.Font = Enum.Font.SourceSansBold
        validationButton.Parent = validationToolbar
        
        local validationCorner = Instance.new("UICorner")
        validationCorner.CornerRadius = UDim.new(0, 4)
        validationCorner.Parent = validationButton
        
        validationButton.MouseButton1Click:Connect(function()
            debugLog("Validation action: " .. buttonText)
        end)
    end
end

-- Create action buttons
function SchemaBuilder:createActionButtons(parent, yOffset)
    local actionSection = Instance.new("Frame")
    actionSection.Size = UDim2.new(1, -20, 0, 80)
    actionSection.Position = UDim2.new(0, 10, 0, yOffset)
    actionSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    actionSection.BorderSizePixel = 1
    actionSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    actionSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = actionSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 25)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üéØ Schema Actions & Management"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 14
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = actionSection
    
    -- Action buttons
    local actions = {
        {text = "üíæ Save Schema", color = Color3.fromRGB(34, 197, 94)},
        {text = "üìã Copy to Clipboard", color = Color3.fromRGB(59, 130, 246)},
        {text = "üóëÔ∏è Clear All", color = Color3.fromRGB(239, 68, 68)},
        {text = "üîÑ Reset to Template", color = Color3.fromRGB(245, 158, 11)},
        {text = "üì§ Export JSON", color = Color3.fromRGB(168, 85, 247)},
        {text = "üèóÔ∏è Apply to DataStore", color = Color3.fromRGB(20, 184, 166)}
    }
    
    for i, action in ipairs(actions) do
        local actionButton = Instance.new("TextButton")
        actionButton.Size = UDim2.new(0.15, -5, 0, 35)
        actionButton.Position = UDim2.new((i-1) * 0.167, 5, 0, 35)
        actionButton.BackgroundColor3 = action.color
        actionButton.BorderSizePixel = 0
        actionButton.Text = action.text
        actionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        actionButton.TextSize = 10
        actionButton.Font = Enum.Font.SourceSansBold
        actionButton.Parent = actionSection
        
        local actionCorner = Instance.new("UICorner")
        actionCorner.CornerRadius = UDim.new(0, 6)
        actionCorner.Parent = actionButton
        
        actionButton.MouseButton1Click:Connect(function()
            debugLog("Schema action: " .. action.text)
            self:executeAction(action.text)
        end)
    end
end



-- Initialize schema state
function SchemaBuilder:init()
    self.currentSchema = {
        name = "New Schema",
        fields = {},
        metadata = {
            created = os.time(),
            modified = os.time(),
            version = "1.0.0"
        }
    }
    self.canvas = nil
    self.fieldCounter = 0
end

-- Load template
function SchemaBuilder:loadTemplate(template)
    debugLog("Loading template: " .. template.name)
    
    if not self.canvas then
        print("‚ùå Canvas not found - cannot load template")
        return
    end
    
    -- Clear existing fields
    self:clearCanvas()
    
    -- Define template schemas
    local templateSchemas = {
        ["Player Data Schema"] = {
            {name = "UserId", type = "Number", required = true, description = "Unique player identifier"},
            {name = "DisplayName", type = "String", required = true, description = "Player display name"},
            {name = "Level", type = "Number", required = false, description = "Player level"},
            {name = "Experience", type = "Number", required = false, description = "Experience points"},
            {name = "Currency", type = "Number", required = false, description = "In-game currency"},
            {name = "Inventory", type = "Array", required = false, description = "Player inventory items"},
            {name = "Settings", type = "Object", required = false, description = "Player preferences"},
            {name = "LastLogin", type = "DateTime", required = false, description = "Last login timestamp"}
        },
        ["Game State Schema"] = {
            {name = "GameId", type = "String", required = true, description = "Unique game identifier"},
            {name = "WorldState", type = "Object", required = true, description = "Current world state"},
            {name = "Progress", type = "Number", required = false, description = "Game progress percentage"},
            {name = "Achievements", type = "Array", required = false, description = "Unlocked achievements"},
            {name = "SessionData", type = "Object", required = false, description = "Current session data"},
            {name = "Checkpoints", type = "Array", required = false, description = "Save checkpoints"}
        },
        ["Inventory Schema"] = {
            {name = "Items", type = "Array", required = true, description = "List of inventory items"},
            {name = "Quantities", type = "Object", required = true, description = "Item quantities"},
            {name = "Metadata", type = "Object", required = false, description = "Item metadata"},
            {name = "Categories", type = "Array", required = false, description = "Item categories"},
            {name = "Rarity", type = "Object", required = false, description = "Item rarity levels"},
            {name = "Timestamps", type = "Object", required = false, description = "Item timestamps"}
        }
    }
    
    local schemaFields = templateSchemas[template.name]
    if not schemaFields then
        print("‚ùå Template schema not found: " .. template.name)
        return
    end
    
    -- Update current schema
    self.currentSchema.name = template.name
    self.currentSchema.fields = {}
    
    -- Add template fields to canvas
    for i, field in ipairs(schemaFields) do
        self:addFieldToCanvas(field, 35 + (i-1) * 45)
        table.insert(self.currentSchema.fields, field)
    end
    
    -- Update canvas size
    self:updateCanvasSize()
    
    print("üèóÔ∏è Template loaded: " .. template.name)
end

-- Add field
function SchemaBuilder:addField(fieldType)
    debugLog("Adding field of type: " .. fieldType.name)
    
    if not self.canvas then
        print("‚ùå Canvas not found - cannot add field")
        return
    end
    
    -- Create new field
    self.fieldCounter = self.fieldCounter + 1
    local newField = {
        name = "Field" .. self.fieldCounter,
        type = fieldType.name,
        required = false,
        description = "New " .. fieldType.name .. " field"
    }
    
    -- Find next available position
    local yPos = 35 + (#self.currentSchema.fields) * 45
    
    -- Add to canvas and schema
    self:addFieldToCanvas(newField, yPos)
    table.insert(self.currentSchema.fields, newField)
    
    -- Update canvas size
    self:updateCanvasSize()
    
    print("‚ûï Added field: " .. fieldType.name)
end

-- Add field to canvas
function SchemaBuilder:addFieldToCanvas(field, yPos)
    if not self.canvas then return end
    
    local fieldElement = Instance.new("Frame")
    fieldElement.Name = "Field_" .. field.name
    fieldElement.Size = UDim2.new(1, -20, 0, 35)
    fieldElement.Position = UDim2.new(0, 10, 0, yPos)
    fieldElement.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    fieldElement.BorderSizePixel = 1
    fieldElement.BorderColor3 = field.required and Color3.fromRGB(239, 68, 68) or Color3.fromRGB(107, 114, 128)
    fieldElement.Parent = self.canvas
    
    local fieldCorner = Instance.new("UICorner")
    fieldCorner.CornerRadius = UDim.new(0, 4)
    fieldCorner.Parent = fieldElement
    
    -- Field name (editable)
    local fieldNameBox = Instance.new("TextBox")
    fieldNameBox.Size = UDim2.new(0.3, -5, 0.8, 0)
    fieldNameBox.Position = UDim2.new(0, 5, 0.1, 0)
    fieldNameBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    fieldNameBox.BorderSizePixel = 0
    fieldNameBox.Text = field.name
    fieldNameBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    fieldNameBox.TextSize = 11
    fieldNameBox.Font = Enum.Font.SourceSansBold
    fieldNameBox.TextXAlignment = Enum.TextXAlignment.Left
    fieldNameBox.PlaceholderText = "Field name"
    fieldNameBox.Parent = fieldElement
    
    local nameCorner = Instance.new("UICorner")
    nameCorner.CornerRadius = UDim.new(0, 3)
    nameCorner.Parent = fieldNameBox
    
    -- Field type
    local fieldTypeLabel = Instance.new("TextLabel")
    fieldTypeLabel.Size = UDim2.new(0.2, -5, 1, 0)
    fieldTypeLabel.Position = UDim2.new(0.3, 5, 0, 0)
    fieldTypeLabel.BackgroundTransparency = 1
    fieldTypeLabel.Text = field.type
    fieldTypeLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    fieldTypeLabel.TextSize = 10
    fieldTypeLabel.Font = Enum.Font.SourceSans
    fieldTypeLabel.TextXAlignment = Enum.TextXAlignment.Left
    fieldTypeLabel.Parent = fieldElement
    
    -- Required checkbox
    local requiredCheck = Instance.new("TextButton")
    requiredCheck.Size = UDim2.new(0.15, -5, 0.6, 0)
    requiredCheck.Position = UDim2.new(0.5, 5, 0.2, 0)
    requiredCheck.BackgroundColor3 = field.required and Color3.fromRGB(34, 197, 94) or Color3.fromRGB(107, 114, 128)
    requiredCheck.BorderSizePixel = 0
    requiredCheck.Text = field.required and "‚úì Required" or "Optional"
    requiredCheck.TextColor3 = Color3.fromRGB(255, 255, 255)
    requiredCheck.TextSize = 9
    requiredCheck.Font = Enum.Font.SourceSans
    requiredCheck.Parent = fieldElement
    
    local checkCorner = Instance.new("UICorner")
    checkCorner.CornerRadius = UDim.new(0, 3)
    checkCorner.Parent = requiredCheck
    
    -- Description (editable)
    local descBox = Instance.new("TextBox")
    descBox.Size = UDim2.new(0.2, -5, 0.8, 0)
    descBox.Position = UDim2.new(0.65, 5, 0.1, 0)
    descBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    descBox.BorderSizePixel = 0
    descBox.Text = field.description or ""
    descBox.TextColor3 = Color3.fromRGB(200, 200, 200)
    descBox.TextSize = 9
    descBox.Font = Enum.Font.SourceSans
    descBox.TextXAlignment = Enum.TextXAlignment.Left
    descBox.PlaceholderText = "Description"
    descBox.Parent = fieldElement
    
    local descCorner = Instance.new("UICorner")
    descCorner.CornerRadius = UDim.new(0, 3)
    descCorner.Parent = descBox
    
    -- Delete button
    local deleteButton = Instance.new("TextButton")
    deleteButton.Size = UDim2.new(0.08, 0, 0.8, 0)
    deleteButton.Position = UDim2.new(0.9, 0, 0.1, 0)
    deleteButton.BackgroundColor3 = Color3.fromRGB(239, 68, 68)
    deleteButton.BorderSizePixel = 0
    deleteButton.Text = "üóëÔ∏è"
    deleteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    deleteButton.TextSize = 10
    deleteButton.Parent = fieldElement
    
    local deleteCorner = Instance.new("UICorner")
    deleteCorner.CornerRadius = UDim.new(0, 3)
    deleteCorner.Parent = deleteButton
    
    -- Event handlers
    fieldNameBox.FocusLost:Connect(function()
        field.name = fieldNameBox.Text
        fieldElement.Name = "Field_" .. field.name
    end)
    
    requiredCheck.MouseButton1Click:Connect(function()
        field.required = not field.required
        requiredCheck.BackgroundColor3 = field.required and Color3.fromRGB(34, 197, 94) or Color3.fromRGB(107, 114, 128)
        requiredCheck.Text = field.required and "‚úì Required" or "Optional"
        fieldElement.BorderColor3 = field.required and Color3.fromRGB(239, 68, 68) or Color3.fromRGB(107, 114, 128)
    end)
    
    descBox.FocusLost:Connect(function()
        field.description = descBox.Text
    end)
    
    deleteButton.MouseButton1Click:Connect(function()
        -- Remove from schema
        for i, schemaField in ipairs(self.currentSchema.fields) do
            if schemaField == field then
                table.remove(self.currentSchema.fields, i)
                break
            end
        end
        
        -- Remove from canvas
        fieldElement:Destroy()
        
        -- Reposition remaining fields
        self:repositionFields()
        
        debugLog("Deleted field: " .. field.name)
    end)
end

-- Clear canvas
function SchemaBuilder:clearCanvas()
    if not self.canvas then return end
    
    for _, child in pairs(self.canvas:GetChildren()) do
        if child.Name:match("^Field_") then
            child:Destroy()
        end
    end
    
    self.currentSchema.fields = {}
    self:updateCanvasSize()
end

-- Reposition fields after deletion
function SchemaBuilder:repositionFields()
    if not self.canvas then return end
    
    local fieldElements = {}
    for _, child in pairs(self.canvas:GetChildren()) do
        if child.Name:match("^Field_") then
            table.insert(fieldElements, child)
        end
    end
    
    -- Sort by current position
    table.sort(fieldElements, function(a, b)
        return a.Position.Y.Offset < b.Position.Y.Offset
    end)
    
    -- Reposition
    for i, element in ipairs(fieldElements) do
        element.Position = UDim2.new(0, 10, 0, 35 + (i-1) * 45)
    end
    
    self:updateCanvasSize()
end

-- Update canvas size
function SchemaBuilder:updateCanvasSize()
    if not self.canvas then return end
    
    local fieldCount = #self.currentSchema.fields
    local contentHeight = math.max(500, 80 + fieldCount * 45)
    self.canvas.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
end

-- Execute action
function SchemaBuilder:executeAction(action)
    debugLog("Executing action: " .. action)
    
    if action == "üíæ Save Schema" then
        self:saveSchema()
    elseif action == "üìã Copy to Clipboard" then
        self:copyToClipboard()
    elseif action == "üóëÔ∏è Clear All" then
        self:clearCanvas()
    elseif action == "üîÑ Reset to Template" then
        self:resetToTemplate()
    elseif action == "üì§ Export JSON" then
        self:exportJSON()
    elseif action == "üèóÔ∏è Apply to DataStore" then
        self:applyToDataStore()
    end
    
    print("üéØ Action executed: " .. action)
end

-- Save schema
function SchemaBuilder:saveSchema()
    self.currentSchema.metadata.modified = os.time()
    print("üíæ Schema saved: " .. self.currentSchema.name)
    print("üìä Fields: " .. #self.currentSchema.fields)
end

-- Copy to clipboard
function SchemaBuilder:copyToClipboard()
    local HttpService = game:GetService("HttpService")
    local schemaJSON = HttpService:JSONEncode(self.currentSchema)
    print("üìã Schema copied to clipboard (JSON format)")
    print("üìÑ Content: " .. string.sub(schemaJSON, 1, 100) .. "...")
end

-- Reset to template
function SchemaBuilder:resetToTemplate()
    self:clearCanvas()
    print("üîÑ Schema reset - ready for new template")
end

-- Export JSON
function SchemaBuilder:exportJSON()
    local HttpService = game:GetService("HttpService")
    local schemaJSON = HttpService:JSONEncode(self.currentSchema)
    print("üì§ Schema exported as JSON")
    print("üìÑ JSON Schema:")
    print(schemaJSON)
end

-- Apply to DataStore
function SchemaBuilder:applyToDataStore()
    print("üèóÔ∏è Applying schema to DataStore...")
    print("üìä Schema: " .. self.currentSchema.name)
    print("üîß Fields: " .. #self.currentSchema.fields)
    
    -- Show DataStore selection dialog
    self:showDataStoreSelectionDialog()
end

-- Show DataStore selection dialog
function SchemaBuilder:showDataStoreSelectionDialog()
    -- Create modal overlay
    local overlay = Instance.new("Frame")
    overlay.Name = "DataStoreSelectionOverlay"
    overlay.Size = UDim2.new(1, 0, 1, 0)
    overlay.Position = UDim2.new(0, 0, 0, 0)
    overlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    overlay.BackgroundTransparency = 0.5
    overlay.ZIndex = 1000
    overlay.Parent = game:GetService("CoreGui"):FindFirstChild("DataStoreManagerPro")
    
    -- Create dialog
    local dialog = Instance.new("Frame")
    dialog.Size = UDim2.new(0, 400, 0, 300)
    dialog.Position = UDim2.new(0.5, -200, 0.5, -150)
    dialog.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    dialog.BorderSizePixel = 1
    dialog.BorderColor3 = Color3.fromRGB(60, 60, 60)
    dialog.ZIndex = 1001
    dialog.Parent = overlay
    
    local dialogCorner = Instance.new("UICorner")
    dialogCorner.CornerRadius = UDim.new(0, 8)
    dialogCorner.Parent = dialog
    
    -- Dialog title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 40)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = "üèóÔ∏è Apply Schema to DataStore"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 16
    title.Font = Enum.Font.SourceSansBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = dialog
    
    -- Schema info
    local schemaInfo = Instance.new("TextLabel")
    schemaInfo.Size = UDim2.new(1, -20, 0, 60)
    schemaInfo.Position = UDim2.new(0, 10, 0, 50)
    schemaInfo.BackgroundTransparency = 1
    schemaInfo.Text = "Schema: " .. self.currentSchema.name .. "\nFields: " .. #self.currentSchema.fields .. "\nThis will apply the schema structure to the selected DataStore."
    schemaInfo.TextColor3 = Color3.fromRGB(200, 200, 200)
    schemaInfo.TextSize = 12
    schemaInfo.Font = Enum.Font.SourceSans
    schemaInfo.TextXAlignment = Enum.TextXAlignment.Left
    schemaInfo.TextYAlignment = Enum.TextYAlignment.Top
    schemaInfo.TextWrapped = true
    schemaInfo.Parent = dialog
    
    -- DataStore selection
    local dsLabel = Instance.new("TextLabel")
    dsLabel.Size = UDim2.new(1, -20, 0, 20)
    dsLabel.Position = UDim2.new(0, 10, 0, 120)
    dsLabel.BackgroundTransparency = 1
    dsLabel.Text = "Select DataStore:"
    dsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    dsLabel.TextSize = 12
    dsLabel.Font = Enum.Font.SourceSansBold
    dsLabel.TextXAlignment = Enum.TextXAlignment.Left
    dsLabel.Parent = dialog
    
    local dsInput = Instance.new("TextBox")
    dsInput.Size = UDim2.new(1, -20, 0, 30)
    dsInput.Position = UDim2.new(0, 10, 0, 145)
    dsInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dsInput.BorderSizePixel = 1
    dsInput.BorderColor3 = Color3.fromRGB(60, 60, 60)
    dsInput.Text = "PlayerData"
    dsInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    dsInput.TextSize = 12
    dsInput.Font = Enum.Font.SourceSans
    dsInput.PlaceholderText = "Enter DataStore name"
    dsInput.Parent = dialog
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 4)
    inputCorner.Parent = dsInput
    
    -- Buttons
    local applyButton = Instance.new("TextButton")
    applyButton.Size = UDim2.new(0, 100, 0, 35)
    applyButton.Position = UDim2.new(0, 10, 0, 250)
    applyButton.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
    applyButton.BorderSizePixel = 0
    applyButton.Text = "‚úÖ Apply"
    applyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    applyButton.TextSize = 12
    applyButton.Font = Enum.Font.SourceSansBold
    applyButton.Parent = dialog
    
    local applyCorner = Instance.new("UICorner")
    applyCorner.CornerRadius = UDim.new(0, 6)
    applyCorner.Parent = applyButton
    
    local cancelButton = Instance.new("TextButton")
    cancelButton.Size = UDim2.new(0, 100, 0, 35)
    cancelButton.Position = UDim2.new(0, 120, 0, 250)
    cancelButton.BackgroundColor3 = Color3.fromRGB(107, 114, 128)
    cancelButton.BorderSizePixel = 0
    cancelButton.Text = "‚ùå Cancel"
    cancelButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    cancelButton.TextSize = 12
    cancelButton.Font = Enum.Font.SourceSansBold
    cancelButton.Parent = dialog
    
    local cancelCorner = Instance.new("UICorner")
    cancelCorner.CornerRadius = UDim.new(0, 6)
    cancelCorner.Parent = cancelButton
    
    -- Event handlers
    applyButton.MouseButton1Click:Connect(function()
        local datastoreName = dsInput.Text
        if datastoreName and datastoreName ~= "" then
            self:performSchemaApplication(datastoreName)
            overlay:Destroy()
        else
            print("‚ùå Please enter a DataStore name")
        end
    end)
    
    cancelButton.MouseButton1Click:Connect(function()
        overlay:Destroy()
    end)
    
    -- Close on overlay click
    overlay.MouseButton1Click:Connect(function()
        overlay:Destroy()
    end)
end

-- Perform schema application
function SchemaBuilder:performSchemaApplication(datastoreName)
    print("üèóÔ∏è Applying schema '" .. self.currentSchema.name .. "' to DataStore '" .. datastoreName .. "'")
    
    -- Get DataStore Manager service if available
    if self.services and self.services["core.data.DataStoreManager"] then
        local dataStoreManager = self.services["core.data.DataStoreManager"]
        print("üìä DataStore Manager found - integrating schema")
        
        -- Here you would integrate with the actual DataStore system
        -- For now, just show success
        print("‚úÖ Schema applied successfully to " .. datastoreName)
        print("üìã Schema structure saved for validation")
    else
        print("‚ö†Ô∏è DataStore Manager not available - schema saved for future use")
        print("‚úÖ Schema '" .. self.currentSchema.name .. "' ready for " .. datastoreName)
    end
    
    -- Save schema for future reference
    self:saveSchema()
end

return SchemaBuilder 