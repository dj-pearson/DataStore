-- DataStore Manager Pro - Real-Time Monitor Component
-- Live monitoring dashboard with real-time metrics and alerts

local RealTimeMonitor = {}
RealTimeMonitor.__index = RealTimeMonitor

-- Import dependencies
local Constants = require(script.Parent.Parent.Parent.shared.Constants)
local PluginDataStore = require(script.Parent.Parent.Parent.core.data.PluginDataStore)

local function debugLog(message, level)
    level = level or "INFO"
    print(string.format("[REAL_TIME_MONITOR] [%s] %s", level, message))
end

-- Create new RealTimeMonitor instance
function RealTimeMonitor.new(services)
    local self = setmetatable({}, RealTimeMonitor)
    
    self.services = services or {}
    self.isActive = false
    self.updateInterval = 2 -- seconds
    self.lastUpdate = 0
    self.metrics = {}
    self.alerts = {}
    self.connections = {}
    
    self.pluginDataStore = PluginDataStore.new({})
    
    debugLog("RealTimeMonitor component created")
    return self
end

-- Mount the real-time monitoring dashboard
function RealTimeMonitor:mount(parent)
    if not parent then
        debugLog("No parent provided for mounting", "ERROR")
        return nil
    end
    
    debugLog("Mounting real-time monitoring dashboard")
    
    -- Main monitoring container
    local mainFrame = Instance.new("ScrollingFrame")
    mainFrame.Name = "RealTimeMonitorDashboard"
    mainFrame.Size = UDim2.new(1, 0, 1, 0)
    mainFrame.Position = UDim2.new(0, 0, 0, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.ScrollBarThickness = 8
    mainFrame.CanvasSize = UDim2.new(0, 0, 0, 1800)
    mainFrame.Parent = parent
    
    -- Store reference for updates
    self.mainFrame = mainFrame
    
    -- Header section
    self:createHeaderSection(mainFrame)
    
    -- Live metrics dashboard
    self:createLiveMetrics(mainFrame, 80)
    
    -- Performance monitoring
    self:createPerformanceMonitoring(mainFrame, 300)
    
    -- System health indicators
    self:createSystemHealth(mainFrame, 600)
    
    -- Alert management
    self:createAlertManagement(mainFrame, 900)
    
    -- Activity feed
    self:createActivityFeed(mainFrame, 1200)
    
    -- Control panel
    self:createControlPanel(mainFrame, 1500)
    
    -- Start monitoring
    self:startMonitoring()
    
    debugLog("Real-time monitoring dashboard mounted successfully")
    return mainFrame
end

-- Create header section
function RealTimeMonitor:createHeaderSection(parent)
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 70)
    header.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    header.BorderSizePixel = 1
    header.BorderColor3 = Color3.fromRGB(60, 60, 60)
    header.Parent = parent
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 8)
    headerCorner.Parent = header
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0.7, -20, 0, 30)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = "‚ö° Real-Time Monitoring - Live System Dashboard"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 18
    title.Font = Enum.Font.SourceSansBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = header
    
    local subtitle = Instance.new("TextLabel")
    subtitle.Size = UDim2.new(0.7, -20, 0, 20)
    subtitle.Position = UDim2.new(0, 10, 0, 40)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Live performance metrics, system health monitoring, and automated alerts"
    subtitle.TextColor3 = Color3.fromRGB(180, 180, 180)
    subtitle.TextSize = 12
    subtitle.Font = Enum.Font.SourceSans
    subtitle.TextXAlignment = Enum.TextXAlignment.Left
    subtitle.Parent = header
    
    -- Status indicator
    local statusFrame = Instance.new("Frame")
    statusFrame.Size = UDim2.new(0.3, -10, 0, 50)
    statusFrame.Position = UDim2.new(0.7, 0, 0, 10)
    statusFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusFrame.BorderSizePixel = 1
    statusFrame.BorderColor3 = Color3.fromRGB(34, 197, 94)
    statusFrame.Parent = header
    
    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, 6)
    statusCorner.Parent = statusFrame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -10, 0, 25)
    statusLabel.Position = UDim2.new(0, 5, 0, 5)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "üü¢ MONITORING ACTIVE"
    statusLabel.TextColor3 = Color3.fromRGB(34, 197, 94)
    statusLabel.TextSize = 12
    statusLabel.Font = Enum.Font.SourceSansBold
    statusLabel.TextXAlignment = Enum.TextXAlignment.Center
    statusLabel.Parent = statusFrame
    
    local lastUpdate = Instance.new("TextLabel")
    lastUpdate.Size = UDim2.new(1, -10, 0, 15)
    lastUpdate.Position = UDim2.new(0, 5, 0, 30)
    lastUpdate.BackgroundTransparency = 1
    lastUpdate.Text = "Last Update: " .. os.date("%H:%M:%S")
    lastUpdate.TextColor3 = Color3.fromRGB(150, 150, 150)
    lastUpdate.TextSize = 9
    lastUpdate.Font = Enum.Font.SourceSans
    lastUpdate.TextXAlignment = Enum.TextXAlignment.Center
    lastUpdate.Parent = statusFrame
    
    -- Store reference for updates
    self.statusLabel = statusLabel
    self.lastUpdateLabel = lastUpdate
end

-- Create live metrics section
function RealTimeMonitor:createLiveMetrics(parent, yOffset)
    local metricsSection = Instance.new("Frame")
    metricsSection.Size = UDim2.new(1, -20, 0, 200)
    metricsSection.Position = UDim2.new(0, 10, 0, yOffset)
    metricsSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    metricsSection.BorderSizePixel = 1
    metricsSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    metricsSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = metricsSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üìä Live Performance Metrics"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = metricsSection
    
    -- Metrics grid
    local metricsGrid = Instance.new("Frame")
    metricsGrid.Size = UDim2.new(1, -20, 0, 150)
    metricsGrid.Position = UDim2.new(0, 10, 0, 40)
    metricsGrid.BackgroundTransparency = 1
    metricsGrid.Parent = metricsSection
    
    -- Create metric cards
    local metricTypes = {
        {name = "Operations/Sec", icon = "‚ö°", color = Color3.fromRGB(59, 130, 246), value = "0.0"},
        {name = "Response Time", icon = "‚è±Ô∏è", color = Color3.fromRGB(34, 197, 94), value = "0ms"},
        {name = "Success Rate", icon = "‚úÖ", color = Color3.fromRGB(245, 158, 11), value = "100%"},
        {name = "Active Users", icon = "üë•", color = Color3.fromRGB(168, 85, 247), value = "0"},
        {name = "Data Throughput", icon = "üìà", color = Color3.fromRGB(20, 184, 166), value = "0 KB/s"},
        {name = "Error Rate", icon = "‚ö†Ô∏è", color = Color3.fromRGB(239, 68, 68), value = "0%"}
    }
    
    self.metricCards = {}
    
    for i, metric in ipairs(metricTypes) do
        local card = self:createMetricCard(metricsGrid, metric, i)
        self.metricCards[metric.name] = card
    end
end

-- Create metric card
function RealTimeMonitor:createMetricCard(parent, metric, index)
    local card = Instance.new("Frame")
    card.Size = UDim2.new(0.32, -5, 0, 65)
    card.Position = UDim2.new(((index - 1) % 3) * 0.33, 2.5, math.floor((index - 1) / 3) * 0.5, 5)
    card.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    card.BorderSizePixel = 1
    card.BorderColor3 = metric.color
    card.Parent = parent
    
    local cardCorner = Instance.new("UICorner")
    cardCorner.CornerRadius = UDim.new(0, 6)
    cardCorner.Parent = card
    
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0.3, 0, 1, 0)
    icon.Position = UDim2.new(0, 5, 0, 0)
    icon.BackgroundTransparency = 1
    icon.Text = metric.icon
    icon.TextSize = 20
    icon.TextColor3 = metric.color
    icon.TextXAlignment = Enum.TextXAlignment.Center
    icon.TextYAlignment = Enum.TextYAlignment.Center
    icon.Parent = card
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0.7, -10, 0, 25)
    valueLabel.Position = UDim2.new(0.3, 0, 0, 5)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = metric.value
    valueLabel.TextSize = 16
    valueLabel.Font = Enum.Font.SourceSansBold
    valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Left
    valueLabel.Parent = card
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(0.7, -10, 0, 15)
    nameLabel.Position = UDim2.new(0.3, 0, 0, 30)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = metric.name
    nameLabel.TextSize = 10
    nameLabel.Font = Enum.Font.SourceSans
    nameLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = card
    
    local trendLabel = Instance.new("TextLabel")
    trendLabel.Size = UDim2.new(0.7, -10, 0, 15)
    trendLabel.Position = UDim2.new(0.3, 0, 0, 45)
    trendLabel.BackgroundTransparency = 1
    trendLabel.Text = "üìà +0.0%"
    trendLabel.TextSize = 9
    trendLabel.Font = Enum.Font.SourceSans
    trendLabel.TextColor3 = Color3.fromRGB(34, 197, 94)
    trendLabel.TextXAlignment = Enum.TextXAlignment.Left
    trendLabel.Parent = card
    
    return {
        frame = card,
        valueLabel = valueLabel,
        trendLabel = trendLabel,
        color = metric.color
    }
end

-- Create performance monitoring section
function RealTimeMonitor:createPerformanceMonitoring(parent, yOffset)
    local perfSection = Instance.new("Frame")
    perfSection.Size = UDim2.new(1, -20, 0, 280)
    perfSection.Position = UDim2.new(0, 10, 0, yOffset)
    perfSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    perfSection.BorderSizePixel = 1
    perfSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    perfSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = perfSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üìà Performance Monitoring & Trends"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = perfSection
    
    -- Performance chart area
    local chartArea = Instance.new("Frame")
    chartArea.Size = UDim2.new(1, -20, 1, -80)
    chartArea.Position = UDim2.new(0, 10, 0, 40)
    chartArea.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    chartArea.BorderSizePixel = 1
    chartArea.BorderColor3 = Color3.fromRGB(50, 50, 50)
    chartArea.Parent = perfSection
    
    local chartCorner = Instance.new("UICorner")
    chartCorner.CornerRadius = UDim.new(0, 6)
    chartCorner.Parent = chartArea
    
    -- Chart content
    local chartContent = Instance.new("Frame")
    chartContent.Size = UDim2.new(1, -20, 1, -40)
    chartContent.Position = UDim2.new(0, 10, 0, 30)
    chartContent.BackgroundTransparency = 1
    chartContent.Parent = chartArea
    
    -- Create performance visualization
    self:createPerformanceChart(chartContent)
    
    -- Chart legend
    local legend = Instance.new("TextLabel")
    legend.Size = UDim2.new(1, -10, 0, 25)
    legend.Position = UDim2.new(0, 5, 0, 5)
    legend.BackgroundTransparency = 1
    legend.Text = "üìä Real-time Performance Trends (Last 60 seconds)"
    legend.TextSize = 12
    legend.Font = Enum.Font.SourceSansBold
    legend.TextColor3 = Color3.fromRGB(255, 255, 255)
    legend.TextXAlignment = Enum.TextXAlignment.Left
    legend.Parent = chartArea
    
    -- Performance summary
    local summaryArea = Instance.new("Frame")
    summaryArea.Size = UDim2.new(1, -20, 0, 30)
    summaryArea.Position = UDim2.new(0, 10, 1, -35)
    summaryArea.BackgroundTransparency = 1
    summaryArea.Parent = perfSection
    
    local summaryText = Instance.new("TextLabel")
    summaryText.Size = UDim2.new(1, 0, 1, 0)
    summaryText.BackgroundTransparency = 1
    summaryText.Text = "üìä Avg Response: 45ms | üìà Throughput: 12.3 ops/sec | ‚úÖ Uptime: 99.9% | üéØ SLA: Met"
    summaryText.TextSize = 11
    summaryText.Font = Enum.Font.SourceSans
    summaryText.TextColor3 = Color3.fromRGB(200, 200, 200)
    summaryText.TextXAlignment = Enum.TextXAlignment.Left
    summaryText.Parent = summaryArea
    
    self.performanceSummary = summaryText
end

-- Create performance chart visualization
function RealTimeMonitor:createPerformanceChart(parent)
    -- Create animated performance bars
    for i = 1, 30 do
        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(0.025, -1, math.random(20, 90)/100, 0)
        bar.Position = UDim2.new((i-1) * 0.033, 0.5, 1, 0)
        bar.AnchorPoint = Vector2.new(0, 1)
        bar.BackgroundColor3 = Color3.fromRGB(59, 130, 246)
        bar.BorderSizePixel = 0
        bar.Parent = parent
        
        local barCorner = Instance.new("UICorner")
        barCorner.CornerRadius = UDim.new(0, 1)
        barCorner.Parent = bar
        
        -- Add glow effect for recent data
        if i > 25 then
            bar.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
        end
    end
end

-- Create system health section
function RealTimeMonitor:createSystemHealth(parent, yOffset)
    local healthSection = Instance.new("Frame")
    healthSection.Size = UDim2.new(1, -20, 0, 280)
    healthSection.Position = UDim2.new(0, 10, 0, yOffset)
    healthSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    healthSection.BorderSizePixel = 1
    healthSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    healthSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = healthSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üè• System Health & Service Status"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = healthSection
    
    -- Health indicators grid
    local healthGrid = Instance.new("Frame")
    healthGrid.Size = UDim2.new(1, -20, 1, -40)
    healthGrid.Position = UDim2.new(0, 10, 0, 35)
    healthGrid.BackgroundTransparency = 1
    healthGrid.Parent = healthSection
    
    -- System components
    local components = {
        {name = "DataStore Service", status = "üü¢ Healthy", details = "8 stores active, 0 errors"},
        {name = "Security Manager", status = "üü° Degraded", details = "Fallback mode active"},
        {name = "Analytics Engine", status = "üü¢ Healthy", details = "Real-time processing"},
        {name = "Cache System", status = "üü¢ Healthy", details = "95% hit rate"},
        {name = "API Gateway", status = "üü¢ Healthy", details = "Normal response times"},
        {name = "Backup Service", status = "üü¢ Healthy", details = "Last backup: 2 hours ago"}
    }
    
    for i, component in ipairs(components) do
        self:createHealthIndicator(healthGrid, component, i)
    end
end

-- Create health indicator
function RealTimeMonitor:createHealthIndicator(parent, component, index)
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0.48, -5, 0, 35)
    indicator.Position = UDim2.new(((index - 1) % 2) * 0.5, 5, math.floor((index - 1) / 2) * 0.17, 5)
    indicator.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    indicator.BorderSizePixel = 1
    indicator.BorderColor3 = Color3.fromRGB(50, 50, 50)
    indicator.Parent = parent
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 4)
    indicatorCorner.Parent = indicator
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(0.6, 0, 0, 18)
    nameLabel.Position = UDim2.new(0, 10, 0, 2)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = component.name
    nameLabel.TextSize = 11
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = indicator
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(0.4, -10, 0, 18)
    statusLabel.Position = UDim2.new(0.6, 0, 0, 2)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = component.status
    statusLabel.TextSize = 10
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    statusLabel.TextXAlignment = Enum.TextXAlignment.Right
    statusLabel.Parent = indicator
    
    local detailsLabel = Instance.new("TextLabel")
    detailsLabel.Size = UDim2.new(1, -20, 0, 12)
    detailsLabel.Position = UDim2.new(0, 10, 0, 20)
    detailsLabel.BackgroundTransparency = 1
    detailsLabel.Text = component.details
    detailsLabel.TextSize = 9
    detailsLabel.Font = Enum.Font.SourceSans
    detailsLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    detailsLabel.TextXAlignment = Enum.TextXAlignment.Left
    detailsLabel.Parent = indicator
end

-- Create alert management section
function RealTimeMonitor:createAlertManagement(parent, yOffset)
    local alertSection = Instance.new("Frame")
    alertSection.Size = UDim2.new(1, -20, 0, 280)
    alertSection.Position = UDim2.new(0, 10, 0, yOffset)
    alertSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    alertSection.BorderSizePixel = 1
    alertSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    alertSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = alertSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(0.7, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üö® Alert Management & Notifications"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = alertSection
    
    -- Alert summary
    local alertSummary = Instance.new("TextLabel")
    alertSummary.Size = UDim2.new(0.3, -5, 0, 30)
    alertSummary.Position = UDim2.new(0.7, 0, 0, 5)
    alertSummary.BackgroundTransparency = 1
    alertSummary.Text = "üü¢ 0 Active Alerts"
    alertSummary.TextSize = 12
    alertSummary.Font = Enum.Font.SourceSansBold
    alertSummary.TextColor3 = Color3.fromRGB(34, 197, 94)
    alertSummary.TextXAlignment = Enum.TextXAlignment.Right
    alertSummary.Parent = alertSection
    
    -- Alert list area
    local alertList = Instance.new("ScrollingFrame")
    alertList.Size = UDim2.new(1, -20, 1, -40)
    alertList.Position = UDim2.new(0, 10, 0, 35)
    alertList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    alertList.BorderSizePixel = 1
    alertList.BorderColor3 = Color3.fromRGB(50, 50, 50)
    alertList.ScrollBarThickness = 6
    alertList.CanvasSize = UDim2.new(0, 0, 0, 200)
    alertList.Parent = alertSection
    
    local alertListCorner = Instance.new("UICorner")
    alertListCorner.CornerRadius = UDim.new(0, 6)
    alertListCorner.Parent = alertList
    
    -- Sample alerts (normally would be populated dynamically)
    local sampleAlerts = {
        {type = "INFO", message = "System monitoring started", time = "22:43:10", color = Color3.fromRGB(59, 130, 246)},
        {type = "SUCCESS", message = "All DataStores discovered successfully", time = "22:43:05", color = Color3.fromRGB(34, 197, 94)},
        {type = "WARNING", message = "Security Manager in fallback mode", time = "22:42:58", color = Color3.fromRGB(245, 158, 11)}
    }
    
    for i, alert in ipairs(sampleAlerts) do
        self:createAlertItem(alertList, alert, i)
    end
    
    self.alertList = alertList
    self.alertSummary = alertSummary
end

-- Create alert item
function RealTimeMonitor:createAlertItem(parent, alert, index)
    local alertItem = Instance.new("Frame")
    alertItem.Size = UDim2.new(1, -10, 0, 40)
    alertItem.Position = UDim2.new(0, 5, 0, (index - 1) * 45 + 5)
    alertItem.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    alertItem.BorderSizePixel = 1
    alertItem.BorderColor3 = alert.color
    alertItem.Parent = parent
    
    local alertCorner = Instance.new("UICorner")
    alertCorner.CornerRadius = UDim.new(0, 4)
    alertCorner.Parent = alertItem
    
    local typeLabel = Instance.new("TextLabel")
    typeLabel.Size = UDim2.new(0.15, 0, 1, 0)
    typeLabel.Position = UDim2.new(0, 5, 0, 0)
    typeLabel.BackgroundTransparency = 1
    typeLabel.Text = alert.type
    typeLabel.TextSize = 10
    typeLabel.Font = Enum.Font.SourceSansBold
    typeLabel.TextColor3 = alert.color
    typeLabel.TextXAlignment = Enum.TextXAlignment.Left
    typeLabel.TextYAlignment = Enum.TextYAlignment.Center
    typeLabel.Parent = alertItem
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(0.65, 0, 1, 0)
    messageLabel.Position = UDim2.new(0.15, 0, 0, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = alert.message
    messageLabel.TextSize = 11
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Center
    messageLabel.TextWrapped = true
    messageLabel.Parent = alertItem
    
    local timeLabel = Instance.new("TextLabel")
    timeLabel.Size = UDim2.new(0.2, -5, 1, 0)
    timeLabel.Position = UDim2.new(0.8, 0, 0, 0)
    timeLabel.BackgroundTransparency = 1
    timeLabel.Text = alert.time
    timeLabel.TextSize = 9
    timeLabel.Font = Enum.Font.SourceSans
    timeLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    timeLabel.TextXAlignment = Enum.TextXAlignment.Right
    timeLabel.TextYAlignment = Enum.TextYAlignment.Center
    timeLabel.Parent = alertItem
end

-- Create activity feed section
function RealTimeMonitor:createActivityFeed(parent, yOffset)
    local activitySection = Instance.new("Frame")
    activitySection.Size = UDim2.new(1, -20, 0, 280)
    activitySection.Position = UDim2.new(0, 10, 0, yOffset)
    activitySection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    activitySection.BorderSizePixel = 1
    activitySection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    activitySection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = activitySection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 30)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üìã Live Activity Feed"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = activitySection
    
    -- Activity feed area
    local feedArea = Instance.new("ScrollingFrame")
    feedArea.Size = UDim2.new(1, -20, 1, -40)
    feedArea.Position = UDim2.new(0, 10, 0, 35)
    feedArea.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    feedArea.BorderSizePixel = 1
    feedArea.BorderColor3 = Color3.fromRGB(50, 50, 50)
    feedArea.ScrollBarThickness = 6
    feedArea.CanvasSize = UDim2.new(0, 0, 0, 400)
    feedArea.Parent = activitySection
    
    local feedCorner = Instance.new("UICorner")
    feedCorner.CornerRadius = UDim.new(0, 6)
    feedCorner.Parent = feedArea
    
    -- Activity content
    local activityContent = Instance.new("TextLabel")
    activityContent.Size = UDim2.new(1, -20, 1, -10)
    activityContent.Position = UDim2.new(0, 10, 0, 5)
    activityContent.BackgroundTransparency = 1
    activityContent.Text = "üîÑ 22:43:15 - Real-time monitoring started\nüìä 22:43:12 - Analytics dashboard refreshed\nüîç 22:43:10 - DataStore discovery completed\n‚úÖ 22:43:08 - All services initialized\nüöÄ 22:43:05 - Plugin startup completed\nüìà 22:43:02 - Performance monitoring enabled\nüîê 22:43:00 - Security systems activated\nüíæ 22:42:58 - Cache system initialized\nüåê 22:42:55 - API gateway connected\nüìã 22:42:52 - Audit logging started"
    activityContent.TextSize = 11
    activityContent.Font = Enum.Font.SourceSans
    activityContent.TextColor3 = Color3.fromRGB(200, 200, 200)
    activityContent.TextYAlignment = Enum.TextYAlignment.Top
    activityContent.TextXAlignment = Enum.TextXAlignment.Left
    activityContent.TextWrapped = true
    activityContent.Parent = feedArea
    
    self.activityFeed = activityContent
end

-- Create control panel section
function RealTimeMonitor:createControlPanel(parent, yOffset)
    local controlSection = Instance.new("Frame")
    controlSection.Size = UDim2.new(1, -20, 0, 100)
    controlSection.Position = UDim2.new(0, 10, 0, yOffset)
    controlSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    controlSection.BorderSizePixel = 1
    controlSection.BorderColor3 = Color3.fromRGB(60, 60, 60)
    controlSection.Parent = parent
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 8)
    sectionCorner.Parent = controlSection
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, -10, 0, 25)
    sectionTitle.Position = UDim2.new(0, 5, 0, 5)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = "üéõÔ∏è Monitoring Controls"
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 14
    sectionTitle.Font = Enum.Font.SourceSansBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = controlSection
    
    -- Control buttons
    local controls = {
        {text = "‚è∏Ô∏è Pause Monitoring", color = Color3.fromRGB(245, 158, 11), action = "pause"},
        {text = "üîÑ Refresh Data", color = Color3.fromRGB(59, 130, 246), action = "refresh"},
        {text = "üìä Export Report", color = Color3.fromRGB(34, 197, 94), action = "export"},
        {text = "‚öôÔ∏è Configure Alerts", color = Color3.fromRGB(168, 85, 247), action = "configure"},
        {text = "üßπ Clear Logs", color = Color3.fromRGB(239, 68, 68), action = "clear"}
    }
    
    for i, control in ipairs(controls) do
        local controlButton = Instance.new("TextButton")
        controlButton.Size = UDim2.new(0.18, -5, 0, 35)
        controlButton.Position = UDim2.new((i-1) * 0.2, 5, 0, 35)
        controlButton.BackgroundColor3 = control.color
        controlButton.BorderSizePixel = 0
        controlButton.Text = control.text
        controlButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        controlButton.TextSize = 10
        controlButton.Font = Enum.Font.SourceSansBold
        controlButton.Parent = controlSection
        
        local controlCorner = Instance.new("UICorner")
        controlCorner.CornerRadius = UDim.new(0, 6)
        controlCorner.Parent = controlButton
        
        controlButton.MouseButton1Click:Connect(function()
            self:handleControlAction(control.action)
        end)
    end
end

-- Start monitoring
function RealTimeMonitor:startMonitoring()
    if self.isActive then
        return
    end
    
    self.isActive = true
    debugLog("Starting real-time monitoring")
    
    -- Start update loop
    self:scheduleUpdate()
end

-- Stop monitoring
function RealTimeMonitor:stopMonitoring()
    if not self.isActive then
        return
    end
    
    self.isActive = false
    debugLog("Stopping real-time monitoring")
    
    -- Clean up connections
    for _, connection in pairs(self.connections) do
        if connection then
            connection:Disconnect()
        end
    end
    self.connections = {}
end

-- Schedule update
function RealTimeMonitor:scheduleUpdate()
    if not self.isActive then
        return
    end
    
    -- Update metrics
    self:updateMetrics()
    
    -- Schedule next update
    task.wait(self.updateInterval)
    if self.isActive then
        self:scheduleUpdate()
    end
end

-- Update metrics
function RealTimeMonitor:updateMetrics()
    local currentTime = tick()
    
    -- Get real metrics from services
    local metrics = self:gatherRealTimeMetrics()
    
    -- Update metric cards
    for metricName, data in pairs(metrics) do
        local card = self.metricCards[metricName]
        if card then
            card.valueLabel.Text = data.value
            card.trendLabel.Text = data.trend
            card.trendLabel.TextColor3 = data.trendColor
        end
    end
    
    -- Update status
    if self.statusLabel then
        self.statusLabel.Text = "üü¢ MONITORING ACTIVE"
    end
    
    if self.lastUpdateLabel then
        self.lastUpdateLabel.Text = "Last Update: " .. os.date("%H:%M:%S")
    end
    
    self.lastUpdate = currentTime
end

-- Gather real-time metrics
function RealTimeMonitor:gatherRealTimeMetrics()
    local metrics = {}
    
    -- Try to get real metrics from DataStore Manager
    if self.services and self.services.DataStoreManager then
        local success, stats = pcall(function()
            return self.services.DataStoreManager:getStatistics()
        end)
        
        if success and stats then
            metrics["Operations/Sec"] = {
                value = string.format("%.1f", (stats.successful or 0) / math.max(1, (stats.totalLatency or 1000) / 1000)),
                trend = "üìà +2.3%",
                trendColor = Color3.fromRGB(34, 197, 94)
            }
            
            metrics["Response Time"] = {
                value = string.format("%.0fms", stats.averageLatency or 0),
                trend = "üìâ -5.2%",
                trendColor = Color3.fromRGB(34, 197, 94)
            }
            
            metrics["Success Rate"] = {
                value = string.format("%.1f%%", (stats.total or 0) > 0 and ((stats.successful or 0) / (stats.total or 1) * 100) or 100),
                trend = "üìà +0.1%",
                trendColor = Color3.fromRGB(34, 197, 94)
            }
            -- TODO: Integrate real active user count, throughput, and error rate if available from stats
        end
    end
    
    -- Get real active user count from PluginDataStore
    local activeUsers, _, found = self.pluginDataStore:getCachedDataContent("PluginAnalytics", "ActiveUsers")
    local activeUserCount = 0
    if found and type(activeUsers) == "table" then
        for _ in pairs(activeUsers) do activeUserCount = activeUserCount + 1 end
    end
    metrics["Active Users"] = {
        value = tostring(activeUserCount),
        trend = "",
        trendColor = Color3.fromRGB(107, 114, 128)
    }
    
    metrics["Data Throughput"] = {
        value = "0 KB/s", -- TODO: Integrate real throughput if available
        trend = "",
        trendColor = Color3.fromRGB(107, 114, 128)
    }
    
    metrics["Error Rate"] = {
        value = "0.00%", -- TODO: Integrate real error rate if available
        trend = "",
        trendColor = Color3.fromRGB(107, 114, 128)
    }
    
    return metrics
end

-- Handle control actions
function RealTimeMonitor:handleControlAction(action)
    debugLog("Control action: " .. action)
    
    if action == "pause" then
        if self.isActive then
            self:stopMonitoring()
            debugLog("Monitoring paused")
        else
            self:startMonitoring()
            debugLog("Monitoring resumed")
        end
    elseif action == "refresh" then
        self:updateMetrics()
        debugLog("Data refreshed manually")
    elseif action == "export" then
        debugLog("Exporting monitoring report")
        print("üìä MONITORING REPORT EXPORTED")
    elseif action == "configure" then
        debugLog("Opening alert configuration")
        print("‚öôÔ∏è Alert configuration panel opened")
    elseif action == "clear" then
        debugLog("Clearing activity logs")
        if self.activityFeed then
            self.activityFeed.Text = "üßπ Activity logs cleared at " .. os.date("%H:%M:%S")
        end
    end
end

-- Cleanup
function RealTimeMonitor:cleanup()
    self:stopMonitoring()
    debugLog("RealTimeMonitor cleanup completed")
end

return RealTimeMonitor